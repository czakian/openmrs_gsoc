<%@ include file="/WEB-INF/template/include.jsp" %>

/*
	Copyright (c) 2006, The OpenMRS Cooperative
	All Rights Reserved.
*/

dojo.provide("dojo.widget.openmrs.ObsSearch");
dojo.require("dojo.widget.openmrs.OpenmrsSearch");

var openmrsSearchBase = djConfig["baseScriptUri"].substring(0, djConfig["baseScriptUri"].indexOf("/", 1));
document.write("<script type='text/javascript' src='" + openmrsSearchBase + "/dwr/interface/DWRObsService.js'></script>");

dojo.widget.tags.addParseTreeHandler("dojo:ObsSearch");

dojo.widget.defineWidget(
	"dojo.widget.openmrs.ObsSearch",
	dojo.widget.openmrs.OpenmrsSearch,
	{
		patientId: "",
		encounterId: "",
		conceptId: "",
		
		inputPatientNode: null,
		inputPatientWidth: "25em",
		inputPatientId: "",
		inputPatientName: "",
		
		inputConceptNode: null,
		inputConceptWidth: "25em",
		inputConceptId: "",
		inputConceptName: "",
		
		inputEncounterNode: null,
		inputEncounterWidth: "25em",
		inputEncounterId: "",
		inputEncounterName: "",
		
		textPatient: null,
		textConcept: null,
		textEncounter: null,
		lastPatientSearched: null,
		lastConceptSearched: null,
		lastEncounterSearched: null,
		
		initializer: function(){
			dojo.debug("initializing obssearch");
			
			dojo.event.connect("before", this, "doObjectsFound", this, "preDoObjectsFound");
		},
		
		fillInTemplate: function(args, frag){
			var source = this.getFragNodeRef(frag);
			
			// set input ids
			if(!this.inputPatientId){ this.inputPatientId = this.widgetId + "_patient"; }
			this.inputPatientNode.id = this.inputPatientId;
			if(this.inputPatientName){ this.inputPatientNode.name = this.inputPatientName; }
			this.inputPatientNode.style.width = this.inputPatientWidth;

			if(!this.inputConceptId){ this.inputConceptId = this.widgetId + "_patient"; }
			this.inputConceptNode.id = this.inputConceptId;
			if(this.inputConceptName){ this.inputConceptNode.name = this.inputConceptName; }
			this.inputConceptNode.style.width = this.inputConceptWidth;

			if(!this.inputEncounterId){ this.inputEncounterId = this.widgetId + "_patient"; }
			this.inputEncounterNode.id = this.inputEncounterId;
			if(this.inputEncounterName){ this.inputEncounterNode.name = this.inputEncounterName; }
			this.inputEncounterNode.style.width = this.inputEncounterWidth;
			
			if (this.showIncludeRetired) {
				var lbl = document.createElement("label");
				lbl.innerHTML = this.includeRetiredLabel;				
				this.includeRetired.style.display = "";
				this.includeRetired.id = lbl.htmlFor = this.widgetId + "retired";
				this.includeRetired.parentNode.insertBefore(lbl, this.includeRetired);
			}
			if (this.showIncludeVoided) {
				var lbl = document.createElement("label");
				lbl.innerHTML = this.includeVoidedLabel;				
				this.includeVoided.style.display = "";
				this.includeVoided.id = lbl.htmlFor = this.widgetId + "voided";
				this.includeVoided.parentNode.insertBefore(lbl, this.includeVoided);
			}
			if (this.showVerboseListing) {
				var lbl = document.createElement("label");
				lbl.innerHTML = this.verboseListingLabel;				
				this.verboseListing.style.display = "";
				this.verboseListing.id = lbl.htmlFor = this.widgetId + "verbose";
				this.verboseListing.parentNode.insertBefore(lbl, this.verboseListing);
			}
			
			// create header row from defined column names
			this.setHeaderCellContent(this.getHeaderCellContent());
			this.hideHeaderRow();
			
			
			if (this.useOnKeyDown)
				dojo.event.connect(this.inputNode, "onkeydown", this, "onInputChange");
			else {
				dojo.event.connect("before", this.inputPatientNode, "onchange", this, "onInputChange");
				dojo.event.connect("before", this.inputConceptNode, "onchange", this, "onInputChange");
				dojo.event.connect("before", this.inputEncounterNode, "onchange", this, "onInputChange");
			}
	
			/*
			dojo.event.connect("before", this.inputNode, "onkeypress", function(evt) {
				if (evt.keyCode == dojo.event.browser.keys.KEY_ENTER)
					dojo.event.browser.stopEvent(evt);
			});
			*/
			
			dojo.event.connect(this.includeRetired, "onclick", this, "onCheckboxClick");
			dojo.event.connect(this.includeVoided, "onclick", this, "onCheckboxClick");
			dojo.event.connect(this.verboseListing, "onclick", this, "onCheckboxClick");
		},
		
		templateString: '<span><span style="white-space: nowrap"><span dojoAttachPoint="searchLabelNode"></span> <div dojoType="ObsSearch" widgetId="oSearch" searchLabel="<spring:message code="Obs.searchBox" htmlEscape="true"/>" patientId='<request:parameter name="patientId"/>' encounterId='<request:parameter name="encounterId"/>' conceptId='<request:parameter name="conceptId"/>"></div>
		
		
		 <input type="text" value="" dojoAttachPoint="inputPatientNode" autocomplete="off" /> <input type="checkbox" style="display: none" dojoAttachPoint="includeRetired"/> <input type="checkbox" style="display: none" dojoAttachPoint="includeVoided"/> <input type="checkbox" style="display: none" dojoAttachPoint="verboseListing"/></span><span class="openmrsSearchDiv"><table class="openmrsSearchTable" cellpadding="2" cellspacing="0" style="width: 100%"><thead><tr dojoAttachPoint="headerRow"></tr></thead><tbody dojoAttachPoint="objHitsTableBody" style="vertical-align: top"><tr><td class="searchIndex"></td><td></td></tr></tbody></table></span></span>',
		
		postCreate: function() {
			if (this.patientId != "" || this.encounterId != "" || this.conceptId != "") {
				DWRObsService.getObsByPatientConceptEncounter(this.simpleClosure(this, "doObjectsFound"), this.patientId, this.encounterId, this.conceptId, false);
			}
		},
		
		selectObs: function(obsId) {
			DWRObsService.getObs(this.simpleClosure(this, "select"), obsId);
		},
		
		doFindObjects: function(patientId, encounterId, conceptId) {

			if (this.patientId != "" || this.encounterId != "" || this.conceptId != "") {
				DWRObsService.getObsByPatientConceptEncounter(this.simpleClosure(this, "doObjectsFound"), this.patientId, this.encounterId, this.conceptId, false);
			}
			
			return false;
		},
		
		preDoObjectsFound: function(obss) {
			if (obss == null) { return; }
			// if no hits
			
			if (obss.length < 1) {
				obss.push(this.noObsFoundText);
			}
		},
		
		noPatientsFoundText: "<spring:message javaScriptEscape="true" code="ObsSearch.noneFound"/> <br/> ",
		
		getId: function(o) {
			var td = document.createElement("td");
			if (typeof o == 'string') {
				td.colSpan = 5;
				td.innerHTML = o;
			}
			else {
				var obj = document.createElement("a");
				obj.appendChild(document.createTextNode(o.obsId + " "));
				td.appendChild(obj);
			}
			
			return td;
		},
		
		getConceptName : function(o) {
			return o.conceptName == null ? this.noCell() : o.conceptName;
		},

		getEncounterId: function(o) { 
			return o.encounter == null ? this.noCell() : o.encounter;
		},

		getEncounterDate: function(o) { 
			return o.encounterDatetime == null ? this.noCell() : o.encounterDatetime;
		},
		
		getPatientName: function(o) { 
			return o.personName == null ? this.noCell() : o.personName;
		},

		getObsValue: function(o) { 
			return o.value == null ? this.noCell() : o.value;
		},
		
		getCellFunctions: function() {
			return [this.simpleClosure(this, "getId"), 
					this.simpleClosure(this, "getPatientName"), 
					this.simpleClosure(this, "getEncounterDate"), 
					this.simpleClosure(this, "getConceptName"), 
					this.simpleClosure(this, "getObsValue"), 
					];
			
		},
		
		showHeaderRow: true,
		getHeaderCellContent: function() {
			return ['', '<spring:message code="Obs.patient" javaScriptEscape="true"/>', '<spring:message code="Encounter.datetime" javaScriptEscape="true"/>', '<spring:message code="Concept.name" javaScriptEscape="true"/>', '<spring:message code="Obs.value" javaScriptEscape="true"/>'];
		},
		
		getProblemImage: function() {
			var img = document.createElement("img");
			img.src = openmrsContextPath + "/images/problem.gif";
			return img;
		},
		
		getRowHeight: function() {
			return 23;
		},
		
		rowMouseOver: function() {
			if (this.className.indexOf("searchHighlight") == -1) {
				this.className = "searchHighlight " + this.className;
				
				var other = this.nextSibling;
				if (other == null || other.firstChild.id != this.firstChild.id) {
					other = this.previousSibling;
					if (other == null || other.firstChild.id != this.firstChild.id)
						other = null;
				}
				
				if (other != null)
					other.className = "searchHighlight " + other.className;
			}
		},
		
		rowMouseOut: function() {
			var c = this.className;
			this.className = c.substring(c.indexOf(" ") + 1, c.length);
			
			var other = this.nextSibling;
			if (other == null || other.firstChild.id != this.firstChild.id) {
				other = this.previousSibling;
				if (other == null || other.firstChild.id != this.firstChild.id)
					other = null;
			}
			
			if (other != null) {
				c = other.className;
				other.className = c.substring(c.indexOf(" ") + 1, c.length);
			}
		}
	},
	"html"
);
