<?xml version="1.0"?>
<!-- *********************************************************** -->
<!-- ** OpenMRS                                               ** -->
<!-- **                                                       ** -->
<!-- ** Open-Source EMR for Developing Countries              ** -->
<!-- **                                                       ** -->
<!-- ** @author Burke Mamlin                                  ** -->
<!-- ** @version 1.0                                          ** -->
<!-- *********************************************************** -->
<project name="OpenMRS" default="dist">

	<tstamp>
		<format property="timestamp" pattern="MM/dd/yyyy hh:mm aa" />
	</tstamp>

	<!-- import properties -->
	<import file="properties.xml" />

	<echo message="Attempting to load: ${env.OPENMRS_BUILD_PROPERTIES_FILE}" />
	<echo message="Note: A clean build is needed to refresh the connection properties" />

	<!-- Taskdefs -->
	<taskdef file="${tomcat.dir}/tomcatTasks.properties">
		<classpath>
			<pathelement path="${tomcat.dir}/catalina-ant.jar" />
		</classpath>
	</taskdef>

	<!-- *********************************************************** -->
	<!-- **                     TARGETS                           ** -->
	<!-- *********************************************************** -->
	<target name="init" description="initialization">
		<!-- Taskdefs -->
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<fileset dir="${ant-contrib.dir}" includes="*.jar" />
			</classpath>
		</taskdef>

		<!-- These variables are replaced in the code prior to compilation -->
		<filterset id="variables.to.replace">
			<filter token="WEBAPP.NAME" value="${webapp.name}" />
			<filter token="WEBAPP.DISPLAY.NAME" value="${webapp.display.name}" />
			<filter token="WEBAPP.DESCRIPTION" value="${webapp.description}" />
			<filter token="WEBAPP.LOG" value="${webapp.log}" />
			<filter token="TIMESTAMP" value="${timestamp}" />
			<filter token="OPENMRS.VERSION" value="${openmrs.version}" />
			<filter token="DATABASE.VERSION.EXPECTED" value="${openmrs.database_version_expected}" />

			<!-- Mail properties -->
			<filter token="MAIL.TRANSPORT.PROTOCOL" value="${mail.transport.protocol}" />
			<filter token="MAIL.SMTP.HOST" value="${mail.smtp.host}" />
			<filter token="MAIL.SMTP.PORT" value="${mail.smtp.port}" />
			<filter token="MAIL.DEBUG" value="${mail.debug}" />
			<filter token="MAIL.FROM" value="${mail.from}" />
			<filter token="MAIL.SMTP.AUTH" value="${mail.smtp.auth}" />
			<filter token="MAIL.USER" value="${mail.user}" />
			<filter token="MAIL.PASSWORD" value="${mail.password}" />
			<filter token="MAIL.FORMAT" value="${mail.format}" />
		</filterset>

	</target>

	<target name="props" unless="properties.isUpToDate">
		<touch file="${metadata.dir}/api/hibernate/hibernate.cfg.xml" />
		<echo message="properties.isUpToDate: ${properties.isUpToDate}" />
	</target>

	<target name="clean" description="Delete build and dist directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="compile-api" depends="init" description="compile api">
		<mkdir dir="${build.dir}/api" />
		<!-- Copy hibernate metadata -->
		<copy todir="${build.dir}/api">
			<fileset dir="${metadata.dir}/api/hibernate" includes="**/*" />
			<fileset dir="${src.dir}/api">
				<include name="**/*.java" />
				<exclude name="**/ibatis/*" />
				<exclude name="**/Ibatis*" />
			</fileset>
			<filterset refid="variables.to.replace" />
		</copy>
		<javac destdir="${build.dir}/api" debug="${javac.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="api.compile.classpath">
			<src path="${build.dir}/api" />
			<include name="**/*.java" />
		</javac>
	</target>

	<target name="package-api" depends="compile-api" description="create api jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/openmrs-api-${openmrs.version}.jar">
			<manifest>
				<attribute name="Class-Path" value="openmrs-api-${openmrs.version}.jar" />
			</manifest>
			<fileset dir="${build.dir}/api" includes="**/*" />
		</jar>
	</target>

	<target name="javadoc-api" description="generate api documentation">
		<delete dir="${doc.dir}/api" />
		<copy todir="${doc.dir}/api">
			<fileset file="${metadata.dir}/images/openmrs-logo-small.gif" />
		</copy>
		<javadoc packagenames="org.openmrs.*" destdir="${doc.dir}/api" classpathref="api.compile.classpath" author="true" version="true" windowtitle="${doc.title}" header="${doc.header}" footer="${doc.footer}" bottom="${doc.bottom}">
			<fileset dir="${src.dir}/api" defaultexcludes="yes">
				<include name="org/openmrs/**/*.java" />
				<exclude name="**/.svn" />
			</fileset>
		</javadoc>
	</target>

	<target name="package-javadoc-api" depends="javadoc-api" description="packages api documentation">
		<delete file="${doc.dir}/api.zip" />
		<zip destfile="${doc.dir}/api.zip" basedir="${doc.dir}" includes="api/**" />
	</target>

	<target name="compile-api-tests" description="compile api tests">
		<mkdir dir="${build.dir}/test/api" />
		<javac srcdir="${test.dir}/api" destdir="${build.dir}/test/api" debug="${javac.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="api.test.classpath" />
	</target>

	<target name="package-api-tests" depends="compile-api-tests" description="create api-tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/openmrs-api-tests-${openmrs.version}.jar">
			<manifest>
				<attribute name="Class-Path" value="openmrs-api-tests-${openmrs.version}.jar" />
			</manifest>
			<fileset dir="${build.dir}/test/api" />
		</jar>
	</target>

	<target name="compile-web" depends="package-api" description="compile webapp">
		<mkdir dir="${build.dir}/web" />
		<copy todir="${build.dir}/web">
			<fileset dir="${src.dir}/web" includes="**/*.java" />
			<filterset refid="variables.to.replace" />
		</copy>
		<javac srcdir="${build.dir}/web" destdir="${build.dir}/web" debug="${javac.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<classpath>
				<path refid="web.compile.classpath" />
				<path location="${dist.dir}/openmrs-api-${openmrs.version}.jar" />
			</classpath>
		</javac>
		<copy todir="${build.dir}/web">
			<fileset dir="web/WEB-INF">
				<include name="log4j.xml" />
				<include name="messages*" />
				<exclude name="**/lib/**" />
				<exclude name="**/classes/**" />
			</fileset>
			<filterset refid="variables.to.replace" />
		</copy>
	</target>

	
	<target name="deploy-web" description="standalone copy web target">
		<copy todir="${dist.dir}/web">
			<fileset dir="web">
				<exclude name="**/images/**/*" />
				<exclude name="**/*.xsn" />
				<exclude name="**/lib/**" />
				<exclude name="**/classes/**" />
			</fileset>
			<filterset refid="variables.to.replace" />
		</copy>
		<copy todir="${tomcat.home}/webapps/${webapp.name}">
			<fileset dir="${dist.dir}/web">
				<include name="**/*.jsp"/>
				<include name="**/*.css"/>
				<include name="**/*.js"/>
			</fileset>			
		</copy>
	</target>
	
	<target name="package-web-init" depends="compile-web" description="start creation of webapp. Use package-web for complete">
		<mkdir dir="${dist.dir}" />

		<!-- copy the entire web directory to the dist folder (for variable replacement) -->
		<copy todir="${dist.dir}/web" preservelastmodified="true" overwrite="true">
			<fileset dir="web">
				<exclude name="**/images/**/*" />
				<exclude name="**/*.xsn" />
				<exclude name="**/lib/**" />
				<exclude name="**/classes/**" />
			</fileset>
			<filterset refid="variables.to.replace" />
		</copy>
		<copy todir="${dist.dir}/web" preservelastmodified="true" overwrite="true">
			<fileset dir="web">
				<include name="**/images/**/*" />
				<include name="**/*.xsn" />
			</fileset>
		</copy>
		<!-- Rename spring servlet to name of webapp -->
		<move file="${dist.dir}/web/WEB-INF/openmrs-servlet.xml" tofile="${dist.dir}/web/WEB-INF/${webapp.name}-servlet.xml" preservelastmodified="true" overwrite="true" />
	</target>
	
	<target name="package-web" depends="package-web-init" description="create webapp war file">
		<war destfile="${dist.dir}/${webapp.name}.war" basedir="${dist.dir}/web" excludes="**/web.xml" webxml="${dist.dir}/web/WEB-INF/web.xml" duplicate="add">
			<classes dir="${build.dir}/web" />
			<lib file="${dist.dir}/openmrs-api-${openmrs.version}.jar" />
			<lib dir="${antlr.dir}" includes="*.jar" />
			<lib dir="${asm.dir}" includes="*.jar" />
			<lib dir="${c3p0.dir}" includes="*.jar" />
			<lib dir="${cglib.dir}" includes="*.jar" />
			<lib dir="${commons-beanutils.dir}" includes="*.jar" />
			<lib dir="${commons-collections.dir}" includes="*.jar" />
			<!--<lib dir="${commons-dbcp.dir}" includes="*.jar" />-->
			<lib dir="${commons-fileupload.dir}" includes="*.jar" />
			<lib dir="${commons-io.dir}" includes="*.jar" />
			<lib dir="${commons-lang.dir}" includes="*.jar" />
			<lib dir="${commons-logging.dir}" includes="*.jar" />
			<!--<lib dir="${commons-pool.dir}" includes="*.jar" />-->
			<lib dir="${dom4j.dir}" includes="*.jar" />
			<lib dir="${dwr.dir}" includes="*.jar" />
			<lib dir="${ehcache.dir}" includes="*.jar" />
			<lib dir="${hibernate.dir}" includes="*.jar" />
			<!--<lib dir="${ibatis.dir}" includes="*.jar" />-->
			<lib dir="${log4j.dir}" includes="*.jar" />
			<lib dir="${jstl.dir}" includes="*.jar" />
			<lib dir="${jta.dir}" includes="*.jar" />
			<lib dir="${junit.dir}" includes="*.jar" />
			<lib dir="${database.dir}" includes="*.jar" />
			<lib dir="${saxon.dir}" includes="*.jar" />
			<lib dir="${spring.dir}" includes="*.jar" />
			<lib dir="${taglibs.dir}" includes="*.jar" />
			<lib dir="${velocity.dir}" includes="*.jar" />
			<lib dir="${neal-reporting.dir}" includes="*.jar" />
			<!--<lib dir="${quartz.dir}" includes="*.jar" />-->
			<lib dir="${mail.dir}" includes="*.jar" />
			<!--<lib dir="${struts.dir}" includes="*.jar" /> -->
			<!--<lib dir="${commons-digester.dir}" includes="*.jar" />  (for struts) -->
		</war>
	</target>
	
	<target name="package-web-without-libs" depends="package-web-init" description="create webapp war file without libs">
		<war destfile="${dist.dir}/${webapp.name}.war" basedir="${dist.dir}/web" excludes="**/web.xml" webxml="${dist.dir}/web/WEB-INF/web.xml" duplicate="add">
			<classes dir="${build.dir}/web" />
			<lib file="${dist.dir}/openmrs-api-${openmrs.version}.jar" />
		</war>
	</target>

	<target name="package-web-libs-only" description="create zip file of webapp libraries">
		<zip destfile="${dist.dir}/libs-${webapp.version}.zip">
			<zipfileset dir="${antlr.dir}" includes="*.jar" />
			<zipfileset dir="${asm.dir}" includes="*.jar" />
			<zipfileset dir="${c3p0.dir}" includes="*.jar" />
			<zipfileset dir="${cglib.dir}" includes="*.jar" />
			<zipfileset dir="${commons-beanutils.dir}" includes="*.jar" />
			<zipfileset dir="${commons-collections.dir}" includes="*.jar" />
			<!--<zipfileset dir="${commons-dbcp.dir}" includes="*.jar" />-->
			<zipfileset dir="${commons-fileupload.dir}" includes="*.jar" />
			<zipfileset dir="${commons-io.dir}" includes="*.jar" />
			<zipfileset dir="${commons-lang.dir}" includes="*.jar" />
			<zipfileset dir="${commons-logging.dir}" includes="*.jar" />
			<!--<zipfileset dir="${commons-pool.dir}" includes="*.jar" />-->
			<zipfileset dir="${dom4j.dir}" includes="*.jar" />
			<zipfileset dir="${dwr.dir}" includes="*.jar" />
			<zipfileset dir="${ehcache.dir}" includes="*.jar" />
			<zipfileset dir="${hibernate.dir}" includes="*.jar" />
			<!--<zipfileset dir="${ibatis.dir}" includes="*.jar" />-->
			<zipfileset dir="${log4j.dir}" includes="*.jar" />
			<zipfileset dir="${jstl.dir}" includes="*.jar" />
			<zipfileset dir="${jta.dir}" includes="*.jar" />
			<zipfileset dir="${junit.dir}" includes="*.jar" />
			<zipfileset dir="${database.dir}" includes="*.jar" />
			<zipfileset dir="${saxon.dir}" includes="*.jar" />
			<zipfileset dir="${spring.dir}" includes="*.jar" />
			<zipfileset dir="${taglibs.dir}" includes="*.jar" />
			<zipfileset dir="${velocity.dir}" includes="*.jar" />
			<zipfileset dir="${neal-reporting.dir}" includes="*.jar" />
			<!--<zipfileset dir="${quartz.dir}" includes="*.jar" />-->
			<zipfileset dir="${mail.dir}" includes="*.jar" />
			<!--<zipfileset dir="${struts.dir}" includes="*.jar" /> -->
			<!--<zipfileset dir="${commons-digester.dir}" includes="*.jar" />  (for struts) -->
		</zip>
	</target>
	
	<target name="compile-web-tests" description="compile webapp tests">
		<mkdir dir="${build.dir}/test/web" />
		<javac srcdir="${test.dir}/web" destdir="${build.dir}/test/web" debug="${javac.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="web.test.classpath" />
	</target>

	<target name="package-web-tests" depends="compile-web-tests" description="create webapp tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${webapp.name}-web-tests-${webapp.version}.jar">
			<manifest>
				<attribute name="Class-Path" value="${webapp.name}-web-tests-${webapp.version}.jar" />
			</manifest>
			<fileset dir="${build.dir}/test/web" />
		</jar>
	</target>

	<target name="dist" depends="package-web" description="create distribution packages" />

	<target name="install" description="Install application in Tomcat" depends="package-web">
		<deploy url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" war="${dist.dir}/${webapp.name}.war" />
	</target>

	<target name="remove" depends="init" description="Remove application in Tomcat">
		<undeploy url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="update" description="Update application in Tomcat">
		<antcall target="remove" />
		<sleep seconds="5" />
		<antcall target="install" />
	</target>

	<target name="reload" depends="package-web" description="Explode war and reload application in Tomcat">
		<mkdir dir="${tomcat.home}/webapps/${webapp.name}" />
		<unzip src="${dist.dir}/${webapp.name}.war" dest="${tomcat.home}/webapps/${webapp.name}" overwrite="true" />
		<reload url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="start" description="Start Tomcat application">
		<start url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="stop" description="Stop Tomcat application">
		<stop url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="list" description="List Tomcat applications">
		<list url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" />
	</target>

	<target name="schemaexport">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask" classpathref="hibernate.classpath" />

		<schemaexport config="${build.dir}/api/hibernate.cfg.xml" quiet="no" text="yes" drop="no" delimiter=";" output="schema-export.sql">
		</schemaexport>
	</target>
	
	<target name="cleanGrammar">
		<delete>
			<fileset dir="${build.dir}/api/org/openmrs/arden">
			    <include name="**/*.class"/>
			    <include name="**/*.java"/>
			</fileset>
			<fileset dir="${build.dir}/api/org/openmrs/arden/parser">
			    <include name="**/*.class"/>
			    <include name="**/*.java"/>
			</fileset>
			<fileset dir="${src.dir}/api/org/openmrs/arden">
			    <include name="**/ArdenBase*.java"/>
			    <include name="**/*.txt"/>
			    <include name="**/*.smap"/>
			    <include name="**/*.class"/>
			    <include name="**/*.txt"/>
			</fileset>
		</delete>
	</target>
	
	<target name="makeantlr" depends="cleanGrammar" >
		<antlr target="${src.dir}/api/org/openmrs/arden/ArdenRecognizer.g">
			<classpath path="lib/antlr/antlr_2.7.6.jar" />
		</antlr>
	</target>
	
	<target name="Arden Tests">
		<java 
			classpath=".;build/api;lib/antlr/antlrdebug_1.0.0.jar;lib/antlr/antlr_2.7.6.jar" 
			classname="org.openmrs.arden.ArdenBaseParser">
			<arg value="${src.dir}/api/org/openmrs/arden/test"/>
		</java>
	</target>

</project>