<?xml version="1.0"?>
<!-- *********************************************************** -->
<!-- ** OpenMRS                                               ** -->
<!-- **                                                       ** -->
<!-- ** Open-Source EMR for Developing Countries              ** -->
<!-- **                                                       ** -->
<!-- ** @author Burke Mamlin                                  ** -->
<!-- ** @version 1.0                                          ** -->
<!-- *********************************************************** -->
<project name="OpenMRS-trunk" default="dist">

	<tstamp>
		<format property="timestamp" pattern="MMM dd yyyy hh:mm aa" />
	</tstamp>
	
	<!-- Environment properties -->
    <property environment="env"/>
    <property name="env.COMPUTERNAME" value="${env.HOSTNAME}"/>
	
	<!-- Library versions and JARs -->
    <property name="lib.dir" location="lib" />
    <property file="${lib.dir}/lib.properties" />
	<fileset id="lib.files" dir="${lib.dir}">
        <include name="**/*.jar" />
    </fileset>
	<path id="lib.path">
        <fileset refid="lib.files" />
	</path>
	
	<!-- Base definitions (cannot be overwritten by user property file) -->
	<property file="build.properties" />

	
	<!-- Taskdefs -->
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<fileset dir="${ant-contrib.dir}" includes="*.jar" />
		</classpath>
	</taskdef>
	<taskdef file="${tomcat.dir}/tomcatTasks.properties">
		<classpath>
			<pathelement path="${tomcat.dir}/catalina-ant.jar" />
		</classpath>
	</taskdef>
	
	<!-- Load user's build properties -->
	<echo message="Attempting to load: ${env.OPENMRS_BUILD_PROPERTIES_FILE}" />
	
	<available file="${env.OPENMRS_BUILD_PROPERTIES_FILE}" property="env.file.exists"/>
	<available file="${user.home}/Application Data/OpenMRS/OPENMRS-build.properties" property="appdata.file.exists"/>
	<available file="${user.home}/.OpenMRS/OPENMRS-build.properties" property="unix.file.exists"/>
	<if>
		<equals arg1="${env.file.exists}" arg2="true" />
		<then>
			<!-- Load user overrides from environment variable -->
    		<property file="${env.OPENMRS_BUILD_PROPERTIES_FILE}"/>
		</then>
		<elseif>
			<equals arg1="${appdata.file.exists}" arg2="true" />
			<then>
				<!-- Load user overrides from userhome/Application Data/OpenMRS dir -->
				<echo message="Using build properties in: ${user.home}/Application Data/OpenMRS/OPENMRS-build.properties" />
				<property file="${user.home}/Application Data/OpenMRS/OPENMRS-build.properties"/>
			</then>
		</elseif>
		<elseif>
			<equals arg1="${unix.file.exists}" arg2="true" />
				<then>
				<!-- Load user overrides from userhome/.OPENMRS-build.properties file -->
				<echo message="Using build properties in: ${user.home}/.OpenMRS/OPENMRS-build.properties" />
				<property file="${user.home}/.OpenMRS/OPENMRS-build.properties"/>
				</then>
		</elseif>
		<else>
			<echo message="WARNING:"/>
			<echo message="No custom build properties found.  Using default properties" />
		</else>
	</if>
	
	<!-- import default properties -->
	<import file="properties.xml" />
	
	<!-- *********************************************************** -->
	<!-- **                     TARGETS                           ** -->
	<!-- *********************************************************** -->
	<target name="init" description="initialization">
		
		<!-- Discover code and database versions via regular expressions -->
		<loadfile srcfile="${openmrs.database.version.expected.filename}" property="diffFileInput" />
		<propertyregex property="openmrs.database.version.expected"
			input="${diffFileInput}"
			regexp="${openmrs.database.version.expected.regexp}"
			select="\1"
			defaultValue="${openmrs.version.major}.${openmrs.version.minor}.0.00" 
			casesensitive="false" />
		<propertyregex property="openmrs.database.version.expected.short"
			input="${openmrs.database.version.expected}"
			regexp="${openmrs.version.major}\.${openmrs.version.minor}\.${openmrs.version.maintenance}\.([0-9][0-9]+)"
			select="\1"
			defaultValue="00" />
		
		<loadfile srcfile="${openmrs.version.revision.filename}" property="repositoryFileInput" />
		<if>
			<contains string="${repositoryFileInput}" substring="&lt;?xml" casesensitive="false" />
			<then>
				<!-- SVN pre-1.4 uses XML format -->
				<propertyregex property="openmrs.version.revision"
					input="${repositoryFileInput}"
					regexp="${openmrs.version.revision.regexp}"
					select="\1"
					defaultValue="? (error with pre-1.4 revision regexp)" />
			</then>
			<else>
				<!-- SVN 1.4+ does not use XML format, just grab 11th line -->
				<propertyregex property="openmrs.version.revision"
					input="${repositoryFileInput}"
					regexp="^(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n(.*)\n"
					select="\11"
					defaultValue="? (error in post-1.4 revision regexp)" />				
			</else>
		</if>
		<property 
			name="openmrs.version.long" 
			value="${openmrs.version.major}.${openmrs.version.minor}.${openmrs.version.maintenance}.${openmrs.database.version.expected.short} ${openmrs.version.suffix} Build ${openmrs.version.revision}"/>
		<property 
			name="openmrs.version.short" 
			value="${openmrs.version.major}.${openmrs.version.minor}.${openmrs.version.maintenance}.${openmrs.database.version.expected.short}.${openmrs.version.revision}"/>
		<echo message="version: ${openmrs.version.long}"/>
		<property 
			name="openmrs.api.name" 
			value="openmrs-api-${openmrs.version.short}.jar"/>
		
		<!-- These variables are replaced in the web.xml file during compilation 
			  and then read in by org.openmrs.web.Listener at openmrs startup -->
		<filterset id="web.xml.variables.to.replace">
			<filter token="WEBAPP.DISPLAY.NAME" value="${webapp.display.name}" />
			<filter token="WEBAPP.DESCRIPTION" value="${webapp.description}" />
			<filter token="TIMESTAMP" value="${timestamp}" />
		</filterset>
		<!-- Other variables are put in the jar manifest file to be read in 
			 during object construction -->
	</target>

	<target name="clean" description="Delete build and dist directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${doc.dir}" />
	</target>

	<target name="compile-api" depends="init" description="compile api">
		<mkdir dir="${build.dir}" />
		<!-- Copy hibernate metadata and logging settings to build directory -->
		<copy todir="${build.dir}">
			<fileset dir="${metadata.dir}/api/hibernate" includes="**/*" />
			<fileset dir="${metadata.dir}/api/spring" includes="applicationContext-service.xml" />
			<fileset dir="${metadata.dir}/api/log4j" includes="log4j.*" />
		</copy>
		<javac destdir="${build.dir}" debug="${javac.debug}" debuglevel="${javac.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="api.compile.classpath">
			<compilerarg line="${compile.arguments}" />
			<src path="${src.dir}/api" />
		</javac>
	</target>

	<target name="package-all" depends="package-api,package-api-tests,package-web-src"
		description="packages api, test, and web jars for use in modules"/>
	
	<target name="package-api" depends="compile-api" description="create api jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${openmrs.api.name}">
			<manifest>
				<attribute name="Class-Path" value="${openmrs.api.name}" />
				<attribute name="Build-Timestamp" value="${timestamp}" />
				
				<!-- Build properties for OpenmrsConstants to pick up -->
				<section name="org/openmrs/util/">
					<attribute name="Package-Title" value="org.openmrs.util"/>
					
					<attribute name="Specification-Title" value="OpenMRS Build Version and Short Version"/>
					<attribute name="Specification-Vendor" value="${openmrs.version.long}"/>
					<attribute name="Specification-Version" value="${openmrs.version.short}"/>
					
					<attribute name="Implementation-Title" value="OpenMRS Expected Database Version"/>
					<attribute name="Implementation-Version" value="${openmrs.database.version.expected}"/>
				</section>
			</manifest>
			<fileset dir="${build.dir}">
				<include name="**/*"/>
				<exclude name="**/web/**" />
				<exclude name="**/test/**" />
				<exclude name="log4j.xml" />
			</fileset>
		</jar>
	</target>

	<target name="javadoc-api" description="generate api documentation">
		<delete dir="${doc.dir}/api" />
		<copy todir="${doc.dir}/api">
			<fileset file="${metadata.dir}/images/openmrs-logo-small.gif" />
		</copy>
		<javadoc packagenames="org.openmrs.*" destdir="${doc.dir}/api" classpathref="api.compile.classpath" author="true" version="true" windowtitle="${doc.title}" header="${doc.header}" footer="${doc.footer}" bottom="${doc.bottom}">
			<packageset dir="${src.dir}/api" defaultexcludes="yes">
				<include name="org/openmrs/**" />
				<exclude name="**/.svn" />
			</packageset>
		</javadoc>
	</target>

	<target name="package-javadoc-api" depends="javadoc-api" description="packages api documentation">
		<delete file="${doc.dir}/api.zip" />
		<zip destfile="${doc.dir}/api.zip" basedir="${doc.dir}" includes="api/**" />
	</target>

	<target name="compile-api-tests" depends="package-api" description="compile api tests">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${test.dir}/api" destdir="${build.dir}" debug="${javac.debug}" debuglevel="${javac.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="api.test.classpath">
			<compilerarg line="${compile.arguments}" />
		</javac>
		
		<!-- move files over that are required for modules to use this test-openmrs-api*.jar file -->
		<copy todir="${build.dir}/org/openmrs/test/testutil" file="${test.dir}/api/org/openmrs/test/testutil/TestingApplicationContext.xml" />
		<copy todir="${build.dir}/org/openmrs/test/include" file="${test.dir}/api/org/openmrs/test/include/initialInMemoryTestDataSet.xml" />
		
		<!-- copy the extra files to the build dir in case an ant-clean was just done -->
		<copy todir="${build.dir}">
			<!-- dbunit files for db and api tests -->
			<fileset dir="${test.dir}/api" includes="**/*.xml"/>
			<!-- module files for module tests -->
			<fileset dir="${test.dir}/api" includes="**/*.omod"/>
		</copy>
		
	</target>

	<target name="package-api-tests" depends="compile-api-tests" description="create api-tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/tests-${openmrs.api.name}">
			<manifest>
				<attribute name="Class-Path" value="tests-${openmrs.api.name}" />
			</manifest>
			<fileset dir="${build.dir}">
				<exclude name="**/web/test/*.class" />
				<include name="**/test/**/*.class" />
				<include name="org/openmrs/test/include/initialInMemoryTestDataSet.xml" />
			</fileset>
			<!-- Put this xml in a separate fileset so that its in the root of the jar file -->
			<fileset file="${build.dir}/org/openmrs/test/testutil/TestingApplicationContext.xml" />
		</jar>
	</target>

	<target name="compile-web" depends="package-api" description="compile webapp">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir}/web" destdir="${build.dir}" debug="${javac.debug}" debuglevel="${javac.debuglevel}" 
			deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<compilerarg line="${compile.arguments}" />
			<classpath>
				<path refid="web.compile.classpath" />
				<path location="${dist.dir}/${openmrs.api.name}" />
			</classpath>
		</javac>
	</target>

	<!-- 
		TODO: The 'deploy' target doesn't work all that well with our setup for some reason.  	
	-->
    <target name="deploy" depends="package-web" if="tomcat.home" description="Move war into the tomcat's webapps directory - ">
		<echo message="Deploying webapp to Tomcat.  NOTE: The 'deploy' target is not working as expected yet."/>
        <war src="${dist.dir}/${webapp.name}.war"
            dest="${tomcat.home}/webapps/${webapp.name}"/>
    </target>
	
	<target name="undeploy" if="tomcat.home" description="undeploy war file to servlet container's deployment dir">
		<echo message="Undeploying webapp from Tomcat"/>
		<delete file="${tomcat.home}/webapps/${webapp.name}.war"/>
		<delete dir="${tomcat.home}/webapps/${webapp.name}"/>
	</target>		
	
	
	<target name="deploy-web" description="standalone copy web target">
		<copy todir="${tomcat.home}/webapps/${webapp.name}">
			<fileset dir="web">
				<include name="**/*.jsp"/>
				<include name="**/*.tag"/>
				<include name="**/*.css"/>
				<include name="**/*.js"/>
				<include name="**/*.withjstl"/>
				<include name="**/*.tag"/>
				<include name="**/messages*.properties"/>
				<include name="**/images/**/*" />
				<!-- This fileset doesn't exclude /web/test so that 
					 developers can easily test files -->
			</fileset>
		</copy>
	</target>

	

	
	
	<target name="package-web-init" depends="compile-web" description="start creation of webapp. Use package-web for complete">
		<mkdir dir="${dist.dir}/web" />
		
		<!-- copy the web.xml file to the dist folder (for variable replacement) -->
		<copy todir="${dist.dir}/web" preservelastmodified="true" overwrite="true">
			<fileset file="web/WEB-INF/web.xml" />
			<filterset refid="web.xml.variables.to.replace" />
		</copy>
		
		<property name="libs-zipped-temp" value="${dist.dir}/web/temp-war-libs-zipped.zip" />
		<zip destfile="${libs-zipped-temp}">
			
			<!-- NOTE: You must do an ant "clean" after changing these libraries -->
			
			<zipfileset dir="${antlr.dir}" includes="*.jar" />
			<zipfileset dir="${asm.dir}" includes="*.jar" />
			<zipfileset dir="${c3p0.dir}" includes="*.jar" />
			<zipfileset dir="${cglib.dir}" includes="*.jar" />
			<zipfileset dir="${commons-beanutils.dir}" includes="*.jar" />
			<zipfileset dir="${commons-collections.dir}" includes="*.jar" excludes="*test*.jar" />
			<zipfileset dir="${commons-fileupload.dir}" includes="*.jar" />
			<zipfileset dir="${commons-io.dir}" includes="*.jar" />
			<zipfileset dir="${commons-lang.dir}" includes="*.jar" />
			<zipfileset dir="${commons-logging.dir}" includes="*.jar" excludes="*api*.jar" />
			<zipfileset dir="${database.dir}" includes="*.jar" />
			<zipfileset dir="${dom4j.dir}" includes="*.jar" />
			<zipfileset dir="${dwr.dir}" includes="*.jar" />
			<zipfileset dir="${ehcache.dir}" includes="*.jar" />
			<zipfileset dir="${hl7api.dir}" includes="*.jar" />
			<zipfileset dir="${hibernate.dir}" includes="*.jar" />
			<zipfileset dir="${jfreechart.dir}" includes="*.jar" />
			<zipfileset dir="${jstl.dir}" includes="*.jar" />
			<zipfileset dir="${jta.dir}" includes="*.jar" />
			<zipfileset dir="${log4j.dir}" includes="*.jar" />
			<zipfileset dir="${mail.dir}" includes="*.jar" />
			<zipfileset dir="${neal-reporting.dir}" includes="*.jar" />
			<zipfileset dir="${saxon.dir}" includes="*.jar" />
			<zipfileset dir="${simple.dir}" includes="*.jar" />
			<zipfileset dir="${spring.dir}" includes="*.jar" excludes="*Test*.jar"/>
			<zipfileset dir="${stax.dir}" includes="*.jar" />
			<zipfileset dir="${taglibs.dir}" includes="*.jar" />
			<zipfileset dir="${velocity.dir}" includes="*.jar" />
			<zipfileset dir="${xerces.dir}" includes="*.jar" excludes="*Samples*.jar" />
			<zipfileset dir="${xstream.dir}" includes="*.jar" />
		</zip>
		
	</target>
	
	<target name="package-web" depends="package-web-init" description="create webapp war file">
		<war destfile="${dist.dir}/${webapp.name}.war" basedir="web" excludes="**/web.xml, **/test/" webxml="${dist.dir}/web/web.xml" duplicate="add">
			<classes dir="${build.dir}">
				<include name="**/web/**/*.class" />
				<include name="log4j.xml" />
			</classes>
			<lib file="${dist.dir}/${openmrs.api.name}" />
			<lib src="${libs-zipped-temp}" />
		</war>
	</target>
	
	<target name="package-web-src" depends="compile-web" description="Create jar file containing web java src">
		<mkdir dir="${build.dir}" />
		<javac destdir="${build.dir}" debug="${javac.debug}" debuglevel="${javac.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="web.compile.classpath">
			<compilerarg line="${compile.arguments}" />
			<src path="${src.dir}/web" />
			<include name="**/*.java" />
		</javac>
		
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/web-${openmrs.api.name}">
			<fileset dir="${build.dir}" includes="**/web/**/*" />
		</jar>
	</target>
	
	<target name="package-web-without-libs" depends="package-web-init" description="create webapp war file without libs">
		<war destfile="${dist.dir}/${webapp.name}.war" basedir="web" excludes="**/web.xml, **/test/" webxml="${dist.dir}/web/web.xml" duplicate="add">
			<classes dir="${build.dir}" >
				<include name="**/web/**/*.class" />
				<include name="log4j.xml" />
			</classes>
		</war>
	</target>

	<target name="package-web-libs-only" depends="package-web-init" description="create zip file of webapp libraries">
		<zip destfile="${dist.dir}/libs-${openmrs.version.short}.zip">
			<zipfileset file="${dist.dir}/${openmrs.api.name}" />
			<zipfileset src="${libs-zipped-temp}" />
		</zip>
	</target>
	
	<!-- 
	<target name="compile-web-tests" description="compile webapp tests">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${test.dir}/web" destdir="${build.dir}" debug="${javac.debug}" debuglevel="${javac.debuglevel}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="web.test.classpath">
			<compilerarg line="${compile.arguments}" />
		</javac>
	</target>
	
	<target name="package-web-tests" depends="compile-web-tests" description="create webapp tests jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${webapp.name}-web-tests-${webapp.version}.jar">
			<manifest>
				<attribute name="Class-Path" value="${webapp.name}-web-tests-${webapp.version}.jar" />
			</manifest>
			<fileset dir="${build.dir}" >
				<include name="**/web/**/*Test.class" />
			</fileset>
		</jar>
	</target>
	-->

	<target name="dist" depends="package-web" description="create distribution packages" />

	<target name="install" description="Install application in Tomcat" depends="package-web">
		<deploy url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" war="${dist.dir}/${webapp.name}.war" />
	</target>

	<target name="remove" depends="init" description="Remove application in Tomcat">
		<undeploy url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="update" description="Update application in Tomcat">
		<antcall target="remove" />
		<sleep seconds="2" />
		<antcall target="install" />
		<antcall target="growl" />
	</target>
	
	<target name="growl">
		<exec executable="/usr/local/bin/growlnotify" os="Mac OS X" logError="true">
			<arg line="-m 'OpenMRS is ready' Build completed -a Eclipse" />
		</exec>
	</target>
				
	<target name="reload" depends="package-web" description="Explode war and reload application in Tomcat">
		<mkdir dir="${tomcat.home}/webapps/${webapp.name}" />
		<unzip src="${dist.dir}/${webapp.name}.war" dest="${tomcat.home}/webapps/${webapp.name}" overwrite="true" />
		<reload url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="start" description="Start Tomcat application">
		<start url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="stop" description="Stop Tomcat application">
		<stop url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="/${webapp.name}" />
	</target>

	<target name="list" description="List Tomcat applications">
		<list url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" />
	</target>

	<target name="tomcat-start" description="Start Tomcat">
		<echo message="Starting Tomcat denoted by the tomcat.home property" />
		<java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">
			<jvmarg line='-Dcatalina.home="${tomcat.home}" -Xmx512M -Xms128M -XX:PermSize=64M -XX:MaxPermSize=128m -XX:NewSize=64m -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5000'/>
		</java>
     </target>

     <target name="tomcat-stop" description="Stop Tomcat">
     	<echo message="Stopping Tomcat denoted by the tomcat.home property" />
         <java jar="${tomcat.home}/bin/bootstrap.jar" fork="true">
             <jvmarg line='-Dcatalina.home="${tomcat.home}"'/>
             <arg line="stop"/>
         </java>
     </target>
	
	<target name="schemaexport">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask" classpathref="hibernate.classpath" />

		<schemaexport config="${build.dir}/api/hibernate.cfg.xml" quiet="no" text="yes" drop="no" delimiter=";" output="schema-export.sql">
		</schemaexport>
	</target>
	
	<target name="arden-clean-grammar">
		<delete>
			<fileset dir="${build.dir}/org/openmrs/arden">
			    <include name="**/*.class"/>
			    <include name="**/*.java"/>
			</fileset>
			<!--fileset dir="${build.dir}/api/org/openmrs/arden/parser">
			    <include name="**/*.class"/>
			    <include name="**/*.java"/>
			</fileset>-->
			<fileset dir="${src.dir}/api/org/openmrs/arden">
			    <include name="**/ArdenBase*.java"/>
			    <include name="**/*.txt"/>
			    <include name="**/*.smap"/>
			    <include name="**/*.class"/>
			    <include name="**/*.txt"/>
			</fileset>
		</delete>
	</target>
	
	<!--target name="arden-make-antlr" depends="arden-clean-grammar" > -->
	<target name="arden-make-antlr" >
		<antlr target="${src.dir}/api/org/openmrs/arden/ArdenRecognizer.g">
			<classpath path="lib/antlr/antlr_2.7.6.jar" />
		</antlr>
	</target>
	
	<target name="arden-tests">
		<java 
			classpath=".;build;lib/antlr/antlrdebug_1.0.0.jar;lib/antlr/antlr_2.7.6.jar" 
			classname="org.openmrs.arden.ArdenBaseParser">
			<arg value="${src.dir}/api/org/openmrs/arden/test"/>
		</java>
	</target>
	
	<target name="hl7-test" description="Spawns the HL7API test panel for testing HL7 messages (see http://hl7api.sourceforge.net)">
		<java classname="ca.uhn.hl7v2.app.TestPanel" fork="yes" spawn="yes">
			<classpath>
				<fileset dir="${hl7api.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${commons-logging.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${xerces.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
	
	<target name="junit-report" depends="junit" description="Run tests and create JUnit report (requires driver.jar property)">
        <delete dir="${junit-reports.dir}" failonerror="false" />
        <mkdir dir="${junit-reports.dir}" />
        <junitreport todir="${junit-reports.dir}">
			<fileset dir="${junit-tests.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${junit-reports.dir}"/>
		</junitreport>
		
		<!-- TODO add other execs for different OS's. Switch to osfamily with Ant 1.7 -->
		<exec os="Windows XP" executable="C:/Program Files/Mozilla Firefox/firefox.exe" spawn="true">
			<arg value="file:///${junit-reports.dir}/index.html"/>
		</exec>
		<exec os="Linux" executable="firefox" spawn="true">
			<arg value="file:///${junit-reports.dir}/index.html"/>
		</exec>
		
	</target>

    <target name="junit" depends="compile-api-tests" description="Run the test suite (requires driver.jar property)">
		<delete dir="${junit-tests.dir}" failonerror="false"/>
		<mkdir dir="${junit-tests.dir}" />
		
	    <path id="junit-path">
			<fileset refid="lib.files" />
		    <pathelement path="${build.dir}"/>
			<pathelement location="${dist.dir}/${openmrs.api.name}"/>
		</path>
		
        <junit printsummary="yes" dir="${junit-tests.dir}" maxmemory="256M" fork="yes" forkmode="perBatch">
			<classpath refid="junit-path"/>
			<formatter type="plain"/>
			<formatter type="xml"/>
            <batchtest todir="${junit-tests.dir}" haltonfailure="no">
				<fileset dir="${build.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/*BaseContextSensitiveTest.class" />
					<exclude name="**/*BaseModuleContextSensitiveTest.class" />
					<exclude name="org/openmrs/web/taglib/SummaryTest.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	

	
</project>
