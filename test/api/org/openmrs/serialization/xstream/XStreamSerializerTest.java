/**
 * The contents of this file are subject to the OpenMRS Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://license.openmrs.org
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * Copyright (C) OpenMRS, LLC.  All Rights Reserved.
 */
package org.openmrs.serialization.xstream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.text.SimpleDateFormat;

import org.custommonkey.xmlunit.XMLAssert;
import org.hibernate.proxy.HibernateProxy;
import org.junit.Test;
import org.openmrs.PersonName;
import org.openmrs.User;
import org.openmrs.api.context.Context;
import org.openmrs.serialization.xstream.XStreamSerializer;
import org.openmrs.test.BaseContextSensitiveTest;

/**
 * Test class that test the features of XStreamSerializer, such as cglib's serialization, build
 * reference for cglib and omit "log", etc
 */
public class XStreamSerializerTest extends BaseContextSensitiveTest {
	
	/**
	 * When serialize a proxy of cglib type, we should treat it as a common entity obj without
	 * showing its proxy identity
	 * 
	 * @throws Exception
	 */
	@Test
	public void shouldSerializeCGlibCorrectly() throws Exception {
		//Here we use the db data stored in "initialInMemoryTestDataSet.xml" and "standardTestDataset.xml"
		PersonName pn = Context.getPersonService().getPersonNameByUuid("399e3a7b-6482-487d-94ce-c07bb3ca3cc7");
		
		//In Hibernate, it will return a proxy using cglib framework
		assertTrue("The person attribute of PersonName should be a hibernate proxy generated by cglib", HibernateProxy.class
		        .isAssignableFrom(pn.getPerson().getClass()));
		
		String xmlOutput = Context.getSerializationService().serialize(pn, XStreamSerializer.class);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
		
		XMLAssert.assertXpathEvaluatesTo("da7f524f-27ce-4bb2-86d6-6d1d05312bd5", "/personName/person/@uuid", xmlOutput);
		XMLAssert.assertXpathEvaluatesTo("2", "/personName/person/personId", xmlOutput);
		XMLAssert.assertXpathEvaluatesTo("M", "/personName/person/gender", xmlOutput);
		XMLAssert.assertXpathEvaluatesTo(sdf.format(pn.getPerson().getBirthdate()), "/personName/person/birthdate",
		    xmlOutput);
		XMLAssert.assertXpathEvaluatesTo("false", "/personName/person/dead", xmlOutput);
		XMLAssert.assertXpathEvaluatesTo("false", "/personName/person/@voided", xmlOutput);
	}
	
	/**
	 * When serializling a cglib proxy, if xstream has already serialized an equal obj with this
	 * proxy, then xstream should build a id reference to that obj instead of inserting a new id.
	 * 
	 * @throws Exception
	 */
	@Test
	public void shouldBuildReferenceForCGlib() throws Exception {
		//Here we use the db data stored in "initialInMemoryTestDataSet.xml" and "standardTestDataset.xml"
		PersonName pn = Context.getPersonService().getPersonNameByUuid("38a686df-d459-484c-9e7c-3f43a9bced58");
		
		//In Hibernate, it will return a proxy using cglib framework
		assertTrue("The person attribute of PersonName should be a hibernate proxy generated by cglib", HibernateProxy.class
		        .isAssignableFrom(pn.getPerson().getClass()));
		
		//creator and person of 'pn' should be the same one, you can find this feature in "initialInMemoryTestDataSet.xml" and "standardTestDataset.xml"
		assertEquals(pn.getCreator(), pn.getPerson());
		
		String xmlOutput = Context.getSerializationService().serialize(pn, XStreamSerializer.class);
		XMLAssert.assertXpathValuesEqual("/personName/creator/@id", "/personName/person/@reference", xmlOutput);
	}
	
	/**
	 * The "log" attribute shouldn't exist in serialized xml string if it is "private transient".
	 * 
	 * @throws Exception
	 */
	@Test
	public void shouldIgnoreLog() throws Exception {
		//Here we use the db data stored in "initialInMemoryTestDataSet.xml" and "standardTestDataset.xml"
		User user = Context.getUserService().getUser(1);
		
		String xmlOutput = Context.getSerializationService().serialize(user, XStreamSerializer.class);
		
		XMLAssert.assertXpathNotExists("/user/log", xmlOutput);
		/*
		 * because we have omited "log" for all classes which are got through "XStreamSerializer.getAllSerializedClasses()",
		 * in the serialized xml string shouldn't contain any element which's name is "log"
		 */
		XMLAssert.assertXpathNotExists("//log", xmlOutput);
	}
}
